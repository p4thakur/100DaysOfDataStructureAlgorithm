struct TrieNode{
    int val;
    TrieNode* child[26];
  //    bool end; no need for end in this  question
  int count=0;
    
    TrieNode()
    {
        for(int i=0;i<26;i++)
          child[i]=NULL;
        count=1;//one node created 
    }
};


void addElement(TrieNode* root,string &s)
{
     TrieNode* curr=root;
     for(int i=0;i<s.size();i++)
    {
        int ch=s[i]-'a';
        //if this is not presnt
        if(curr->child[ch]==NULL)
         curr->child[ch]=new TrieNode();
         else
          (curr->child[ch])->count++;
         //update your current node
         curr=curr->child[ch];
    }
    //now my current root elment is the leaf node
    //curr->end=true;
}

string serachTrie(TrieNode* root, string &s)
{
    string ans="";
    TrieNode* curr=root;//start from dummy node
    for(int i=0;i<s.size();i++)
    {
     //   if freyency is >1 add to answer. if 1 add it to answer and break
     int ch=s[i]-'a';
     ans.push_back(s[i]);
      if((curr->child[ch])->count==1)
       {
           break;
       }
       //else it will be presnt with freq more than 1 so keep continuing
       curr=curr->child[ch];
    }
    return ans;
}
vector<string> Solution::prefix(vector<string> &A) {
    
    //check if if node with current charter is null if yes it is not create yet
    
    
    //cretae a dummy node
    TrieNode* root=new TrieNode();
    
    for(int i=0;i<A.size();i++)
    {
        addElement(root,A[i]);
    }
    
    //Now check the prefix for them. check for the first charcter with freqency one
    vector<string> ans;
   for(int i=0;i<A.size();i++)
   {
       string temp=serachTrie(root,A[i]);
       ans.push_back(temp);
   }
   
   return ans;
}
