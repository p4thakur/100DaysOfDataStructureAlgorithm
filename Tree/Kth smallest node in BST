/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int kthsmallUtil(TreeNode* root, int &k)
{   
    if(root==NULL)return -1;
    int leftans=kthsmallUtil(root->left,k);
    if(k==0)return leftans; //it mean i found element on left side
    k--;
    if(k==0)return root->val;// this mean current node is kth node
    kthsmallUtil(root->right,k);  //y right mein
}
int Solution::kthsmallest(TreeNode* A, int k) {
    //using iterative appaco it is easilr to find it..
   
   //this is classic recusrion problem
   if(A==NULL)return -1;
   
  return  kthsmallUtil(A,k);
  
 /**This above apprach is more nicer way of doing the same things
 int kthsmallestRes(TreeNode *root, int k, int &current) {
    if(root->left != NULL) {
        int res = kthsmallestRes(root->left, k, current);        
        if(current == k)
            return res;
    }
    ++current;
    if(current == k)
        return root->val;

    if(root->right != NULL) {
        int res = kthsmallestRes(root->right, k, current);        
        if(current == k)
            return res;
    }    
}*/ 
   
}
