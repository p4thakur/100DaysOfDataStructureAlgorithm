Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

The first call to next() will return the smallest number in BST. Calling next() again will return the next smallest number in the BST, and so on.

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
//this is imporant concept. its nothing but iterative inorder traversal 
//Use this method please. Use this to solve stuffs..
stack<TreeNode*>  st; 
void pushAll(TreeNode* root)
{
    while(root)
    {
        st.push(root);
        root=root->left;
    }
}


BSTIterator::BSTIterator(TreeNode *root) {
    pushAll(root);
 
}

/** @return whether we have a next smallest number */
bool BSTIterator::hasNext() {
    //check top of stack
    if(!st.empty())return true;
    
    return false;
}

/** @return the next smallest number */
int BSTIterator::next() {
  //take the elment from top...go to the right and push all its left element
    TreeNode* temp=st.top();
    st.pop();
    pushAll(temp->right);
    return temp->val;
}


/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
