################################################################

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

 A height balanced BST : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 
Example :


Given A : 1 -> 2 -> 3
A height balanced BST  :

      2
    /   \
   1     3

vist: https://www.interviewbit.com/problems/convert-sorted-list-to-binary-search-tree/
######################################################

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 //Golbal variable is added so that  recursion doesn't affect my result. I could have passed
 //the list as a reference as well
 ListNode * list;
 
 TreeNode * sortedListUtil( int size){
     
     if(size==0)
       return NULL;
       
       //create a dummy node
      TreeNode* node=new TreeNode(0);
      
      //I need to do it in bottom up manner, which means first fill
      //left and right than fill your parent.Why we are filling first value of LL to be
      //left node of tree?Because if you notice than first value of LL will be the leftmsot node in your BST.
      node->left=sortedListUtil(size/2);
      
      //after filling the left node, now fill current node
      node->val=list->val;
      
      //move forward in the list
      list=list->next;
      
      //fill the right node of BST.Why did we added -1 in (szie-size-1)?
      //This is because number of element remaing are (total node - left node - RootNode) 
      node->right=sortedListUtil(size- size/2 -1);
      
      return node;
       
 }
 
TreeNode* Solution::sortedListToBST(ListNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    if(A==NULL) return NULL;
    
    ListNode* temp=A;
    list=A;
    int size=0;
    //find length of the list
    while(temp)
     {
         size++;
         temp=temp->next;
     }
     
     return sortedListUtil(size);
}
