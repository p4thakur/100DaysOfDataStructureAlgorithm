/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::inorderTraversal(TreeNode* A) {
    
    //Inorder is left root right.
    //using recursion is easy but do it using stack to learn more abou it
    //and it will be usefull in complicated problem
    
    vector<int> result;
    if(A==NULL) return result;
    
    stack<TreeNode*> st;
    st.push(A);
    //TreeNode* root=A;
    while(!st.empty())
    {
        
        //take top element from stack and check if its left exist,if yes put it
        //in the stack and make sure to make left of current element to null to prevent cycle
        TreeNode* root=st.top();
        
        if(root->left)
         {
             st.push(root->left);
             root->left=NULL;
         }
        else
        {
            
              result.push_back(root->val);
              st.pop();
              if(root->right)
               st.push(root->right);
            
        }
        
    }
   return result; 
   
   /*****This below slotion doesnot modfy my tree structure and fairly simple , so use this...
   vector<int> vector;
        if(!root)
           return vector;
        stack<TreeNode *> s1;
        //stack.push(root);
        
        while(!s1.empty() || root) {

            while(root){ //go to  next, of first iterator, inorder
                s1.push(root);
                root = root->left;
            }
            root = s1.top();
            vector.push_back(root->val);
            s1.pop();
            //v1 = n1->val;
            root = root->right;
        }
        
        return vector;
   
   ***/
    
}
