############################################


Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithmâ€™s runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example:

Given [5, 7, 7, 8, 8, 10]

and target value 8,

return [3, 4].


#################################################

vector<int> Solution::searchRange(const vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    
    //its simple BSt i need to move left  and right  and when i get my low==high that's
    //one of my end
    int low=0;
    int high=A.size()-1;
    int x=-1,y=-1;
    //find leftmost target value
    while(low<high)
    {
        
        int mid=(low+high)/2;
        
        if(A[mid]<B)low=mid+1;
        else
        high=mid; 
        /***if you are confused with above i will suggest you write all three conction
        if(A[mid]<B)low=mid+1;
        else 
          if (A[mid]>B) high=mid-1;
        else
          high=mid;
         **/ 
        
    }
    //check if thhis value presnt or not
    if(A[low]==B)
    x=low;
    
    
    high=A.size()-1;
    //finding rightmost target value
    while(low<high)
    {
        // why we are adding +1? since we want our mid to be biased toward right
        //this is the most imprtant step here..thin about case like 10 10
        
        int mid=(low+high)/2+1;
        
        if(A[mid]<=B)low=mid;
        else
         high=mid-1;
    }
    if(A[low]==B)
    y=low;
    
    vector<int> ans;
    ans.push_back(x);
    ans.push_back(y);
    
    return ans;
}
