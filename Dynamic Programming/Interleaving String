int Solution::isInterleave(string A, string B, string C) {
   
   int asize=A.size();
    int bsize=B.size();
    int csize=C.size();

    if(csize < asize+ bsize)return 0;
    
    //dp[i][j]--westher i can form interleaving string C(0 to (i+j)) from  A(00 to i), B(0 too J)
    
    vector<vector<int>>  dp(asize+1, vector<int>(bsize+1,0));
    
 // if(csize==0)    
   dp[0][0]=1;//two empty string will have one interleaving strng as 0
   
    //if A string 0
    for(int i=1;i<=bsize;i++)
      if(B[i-1]==C[i-1])//compare index
        dp[0][i]=dp[0][i-1];
      //else  it will remain 0
      
    //if j =0, which mean string B is of 0 length  
    for(int i=1;i<=asize ;i++)
      if(A[i-1]==C[i-1])
         dp[i][0]=dp[i-1][0];
		   
    
  for(int i=1;i<=asize;i++)
    for(int j=1;j<=bsize;j++)
    {
        //this also works.
        //if charcter matched with A only
        // if(A[i-1]==C[i+j-1] && B[j-1]!=C[i+j-1])
        //   dp[i][j]=dp[i-1][j];
          
        //   else if(A[i-1]!=C[i+j-1] && B[j-1]==C[i+j-1])
        //   dp[i][j]=dp[i][j-1];
           
        //   else if ((A[i-1]==C[i+j-1] && B[j-1]==C[i+j-1]))
        //     dp[i][j]= dp[i-1][j] || dp[i][j-1];
        
        if((A[i-1]==C[i+j-1] || B[j-1]==C[i+j-1]))//if either of them match/
            dp[i][j]=dp[i-1][j] || dp[i][j-1];
         else //if not match
            dp[i][j]=0;
      
    }
    
    return dp[asize][bsize];
}
