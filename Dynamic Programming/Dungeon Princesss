Dungeon Princess
The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon.
The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in
the top-left room and must fight his way through the dungeon to rescue the princess. The knight has an initial health
point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.
Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms;
other rooms are either empty (0's) or contain magic orbs that increase the knight's health (positive integers).
In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.
Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.
######################################################################
int Solution::calculateMinimumHP(vector<vector<int> > &A) {
    
    //This is another diffferent kind of question. This tell us that i can start bottom up apprach from
    //right bottom as well.
    
    //The most important thing about the question is what dp[i][j] represent.
    //dp[i][j]= max strength I need to reach princes(m-1,n-1) from current index.
    //another point to note  at any cell my strength should not be nagtive. so if i get negative make it 1
    int rows=A.size();
    int cols=A[0].size();
    
    vector<vector<int>>  dp(rows, vector<int>(cols,0));
    
    //base case is at point where princess is ..n-1, m-1.
    dp[rows-1][cols-1]=(A[rows-1][cols-1]>0) ? 1: abs(A[rows-1][cols-1])+1 ;
    
    
    //fill last column
    for(int i=rows-2;i>=0;i--)//rember if i geto negative , i will chosse 1 as no cell should ne neagtive at anypoint
      dp[i][cols-1]=max(dp[i+1][cols-1]- A[i][cols-1] ,1);
      
     //fil last rows 
     for(int j=cols-2;j>=0;j--)
       dp[rows-1][j]= max(dp[rows-1][j+1] - A[rows-1][j] , 1);
       
     for(int i=rows-2;i>=0;i--)
       for(int j=cols-2; j>=0;j--)
       {
           int temp=min(dp[i+1][j], dp[i][j+1])- A[i][j];
           dp[i][j]= temp>0 ? temp : 1;
       }
       
     return dp[0][0];  
}
