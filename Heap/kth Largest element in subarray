Find the kth largest element in the subarray [1 to i] where i varies from 1 to N. In other words you need to find the
kth largest element in the sub-arrays [1:1], [1:2], [1:3], ...., [1:n] .

Example:
Input:  

    K = 4  
    Array = [1 2 3 4 5 6]  

Output:  

    X = [-1 -1 -1 1 2 3] 
    
#############################################################################
vector<int> Solution::solve(int A, vector<int> &B) {
    
    //Idea is building minheap of size k  whose top will conatain kth max element
    
    priority_queue<int , vector<int>, greater<int>>   heap;
    vector<int>  ans;
    for(int i=0;i<B.size();i++)
    {
        if(heap.size()==A)
        {
            
         //if current element is less than root, dont insert it else pop out top from root and
         //insert this element
         if(B[i]>=heap.top())
          {
              heap.pop();
              heap.push(B[i]);
              ans.push_back(heap.top()); 
          }
          else
           ans.push_back(heap.top());
        }
        else
        {
            heap.push(B[i]);
            if(i+1==A)//to handle kt element of array
              ans.push_back(heap.top());
            else
             ans.push_back(-1);
        }
    }
    
    return ans;
}
