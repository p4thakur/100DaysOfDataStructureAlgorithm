/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int constructTree(vector<int> &st, int s, int e, int index, vector<int> &A)
{
    //if leafe node
    if(s==e)
      {
          st[index]=A[s];
          return A[s];
      }
      
      int mid=s +(e-s)/2;
      
      st[index]=constructTree(st,s,mid,2*index+1, A)+
                constructTree(st, mid+1, e, 2*index+2,A);
                
         return st[index];       
}

int getSum(vector<int> &st, int rs, int re, int ss, int se,int index)
{
    //if segment range is completly under the given range than return the value
         if(rs<=ss && re>=se)
           return st[index];
         
         //if completly outside the range
         if(rs>se || re<ss)return 0;
         
         //at this stage they will in beteen left or right range
         int mid=ss+(se-ss)/2;
         
         return getSum(st,rs,re,ss,mid,2*index+1)+
                getSum(st,rs,re,mid+1,se,2*index+2);
         
}
//    updateValueSeg(st,0,n-1,diff,1);
void updateValueSeg(vector<int> &st,int ss, int se, int val, int updatedIndex,int index)
{
    //base condtion. check if updated inex our of my ss range
    if(updatedIndex>se || updatedIndex<ss)
      return;
      
    //else update the curren segment
    st[index]+=val;
    
    //if it's not a leave node than traverse left and right to update value thare if possible
    if(ss!=se)
    {
       int mid=ss+(se-ss)/2;
       updateValueSeg(st,ss,mid,val,updatedIndex,2*index+1);
       updateValueSeg(st,mid+1,se,val,updatedIndex,2*index+2);
    }
    
}
int main()
{
    cout<<"Hello World";

    //return 0;
    int n=6;
    vector<int>  arr;
    for(int i=0;i<6;i++)
      {
          int x;
          cin>>x;
          arr.push_back(x);
      }
    
    //hight of tree
    int h=ceil(log2(n));
    //number of node in segmant tree..2 *number of node that are possble in last level of tree-1
    int size= 2* (1<<h) -1;
    
    vector<int> st(size+1);
    
    constructTree(st, 0,n-1, 0,arr);
    //for(int i=0;i<size;i++)
      //cout<<st[i]<<" ";
    //sum for the range 1 to 4[i ,j)  
    cout<<getSum(st, 1,5,0,n-1,0);  
    
    //update number
    int old=arr[1];
    arr[1]=10;
    
    //adding diff to allrange that contain a[I]
    int diff=old-arr[1];
    
    updateValueSeg(st,0,n-1,diff,1,0);
    
    cout<<"Update sum "<<getSum(st, 1,5,0,n-1,0); 
}
