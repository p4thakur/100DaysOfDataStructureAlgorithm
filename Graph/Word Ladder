####################################################################################
Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

        You must change exactly one character in every transformation
        Each intermediate word must exist in the dictionary

Example :

Given:

start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note that we account for the length of the transformation path instead of the number of transformation itself.



https://www.interviewbit.com/problems/word-ladder-i/
###################################################

int Solution::ladderLength(string start, string end, vector<string> &dictV) {
    
    //store all the string in your dictinary in a set 
    unordered_set<string> dictionary(dictV.begin(), dictV.end());
    
    //we will kepp track of distance from start to current word in its path using map
    unordered_map<string,int> distanceFromStart;
    
    //starting distance will be null
    distanceFromStart[start]=1;
    
    //use the queue to perform bfs
    queue<string> q;
    
   q.push(start);
   
   while(!q.empty())
    { 
        //take the string from front of the queue
        string top=q.front();
        q.pop();
        
        //traverse each index of your current string
        for(int i=0;i<top.size() ;i++)
        {
            //for each index of your current string try changing its value in betwen a to z
            for(int j=0;j<26 ;j++)
            {
                string temp=top;
                temp[i]='a'+j;
                //check if this is present in your set
                if(dictionary.find(temp)!=dictionary.end())
                {
                    //make sure u didnot come across the same word again else u will fall in infinte loop
                  if(distanceFromStart.find(temp)==distanceFromStart.end())
                   {
                       //update the distance for the current string
                       distanceFromStart[temp]=distanceFromStart[top]+1;
                       q.push(temp);
                   }
                    
                }
            }
        }
    }
    
//at this point you will contain the distance feom start to end string
  return distanceFromStart[end]; 
}
